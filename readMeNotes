***************************************************************
***************************************************************
******* ROUTEPLANNER 2019 - React, Java, MySQL ****************
***************************************************************
***************************************************************
HOW TO RUN RFOUTEPLANNER APP

--> JavaWorkspace3/MainApp
    ./mvnw spring-boot:run

--> internal react app
    react-routeplanner-app
    npm start

----------------------------------
----------------------------------
SET ROUTEPLANNER UP STANDALONE

--> install npx + npm
--> use eclipse with jdk11
--> install MySQL with root password

----------------------------------
----------------------------------
ROUTE PLANNER JOBS BY DEC 12th, 2019

1) Find Route Screen

   --> start and finish combos should have a promt
       which JOI understands is a blank value
 
2) View Basket

   --> add ticket form and plug into backend
   
   --> 
      
   --> 




NOW
- add in basic front end for basket and making a purchase
  --> basket handling, contact details, purchase, sale confirmation 
  --> apply mosh style error handling in front end
  --> overview of react unit tests  
- develop admin and member areas (keep it simple)

- ensure quality of controller code
  [exception handling needs to be in the controllers]
- service, integration and controller tests (3 types) 
  for shopping part
- implement transactions at service level
- javadocs
- beautify interface with images as appropriate



LATER
--> Add security: authentication and authorization
--> Convert to microservices




----------------------------------
----------------------------------
ROUTE PLANNER ENDPOINTS

Get stations - http://localhost:8080/route/stations
Get Route - http://localhost:8080/route/Farringdon/Piccadilly Circus
General access - http://localhost:8080/route/
User access - http://localhost:8080/route/user
Save Contact Details - http://localhost:8080/reg/contact-details/persist
Get a user by username - ????
Get route queries for user - http://localhost:8080/route/query/1
Save user - http://localhost:8080/reg/user/add
Get Users - http://localhost:8080/reg/users
Update contact details - http://localhost:8080/reg/contact-details/12
Get a user by id - http://localhost:8080/reg/user/id/2
Add Route - http://localhost:8080/route/add
Add Ticket - http://localhost:8080/ticket/admin/add
Get all tickets - http://localhost:8080/ticket/all
Delete ticket - http://localhost:8080/ticket/admin/delete/1
Get current basket or make one - http://localhost:8080/basket/current/2
Get existing contact details for user - http://localhost:8080/reg/contact/4
Add basket with no tickets - http://localhost:8080/basket/add
Save existing basket with new ticket - http://localhost:8080/basket/update/18
Get payment methods for user - http://localhost:8080/order/member/pm/1
Add payment method - http://localhost:8080/order/member/pm/add
Get orders for user - ????
Post Order - http://localhost:8080/order/member/purchase

----------------------------------
----------------------------------
MYSQL

root / J03R00t123!

Configure:
spring.jpa.hibernate.ddl-auto

Database: new_routeplanner_shopping  (automatic JPA)

----------------------------------
----------------------------------
PREPOPULATE DATABASE

For various reasons these have not be added to data.sql,
not yet anyway.

--> insert users
    insert into user values (1, 1, 'pass', 'ROLE_USER', 'user'); 
    insert into user values (2, 1, 'pass', 'ROLE_ADMIN', 'admin');
 
--> insert route query data:
    insert into route_query values(1, 'Farringdon', 'Oxford Circus', 1);

--> insert tickets, for example:
    insert into ticket values(1, 3, 1, 'dest1', 4, 'start1', 2, '2019-10-04' ); 
 
--> insert basket full of tickets:
    --> create basket
    --> insert tickets into basket:  
        --> insert into basket_tickets values (18, 1);
        --> insert into basket_tickets values (18, 3);
        --> insert into basket_tickets values (18, 7);
        --> insert into basket_tickets values (18, 13);
        
 --> insert contact details for user 1:
    insert into contact_details values (
    17, 'ad1', 'add2', 'add3', 'GHlasgow', 'countryV', 'dsf@sdf.com', 
    'fullnamneP', '987875', '765654', '435345', 'region', 'title', 1);
        
 --> insert p[ayment method for user 1:
     insert into payment_method values(1, '1234132423412344', 2, 
     '2022-10-04', 'Mr X Bloggs', '456', null, 1);
 
 --> insert an order for basket 18: 
     insert into orders values(1, 1, '2019-10-04 09:39:20', 18, 1);

----------------------------------
----------------------------------
DATABASE SELECT STATEMENTS AND VIEWS

--> check that user 1 has an empty basket created automatically
select 
    b.id basketId, 
    b.open basketOpen,
    u.roles,
    u.user_name,
    cd.city,
    cd.id contactDetailsId
 from Basket B
 inner join contact_details cd on cd.id = b.contact_details_id
 inner join user u on u.id = cd.user_id
 where u.id = 1

--> List the tickets in a user's basket:
 select 
    b.id basketId, 
    b.open basketOpen,
    u.roles,
    u.user_name,
    cd.city,
    t.num_units numTickets,
    t.start,
    t.destination dest
 from Basket B
 inner join basket_tickets bt on bt.basket_id = b.id
 inner join ticket t on bt.tickets_id = t.id
 inner join contact_details cd on cd.id = b.contact_details_id
 inner join user u on u.id = cd.user_id
 where u.id = 2

--> List all tickets in a specific basket: 
 select b.id basketId, t.*
 from Basket B
 inner join basket_tickets bt on bt.basket_id = b.id
 inner join ticket t on bt.tickets_id = t.id
 where b.id = 18

--> Get all payment methods for user 1: 
 select u.id as userId, pm.*
 from user u
 inner join payment_method pm on pm.user_id = u.id
 where u.id = 1
 
 --> fetch all tickets on the system, regardless of basket or user
 select
    o.id orderId,
    o.purchased purchased,
    b.id basketId, 
    b.open basketOpen,
    u.roles,
    u.user_name,
    cd.city,
    t.num_units numTickets,
    t.start,
    t.destination dest,
    u.id userId
 from orders o
 inner join basket b on b.id = o.basket_id
 inner join basket_tickets bt on bt.basket_id = b.id
 inner join ticket t on bt.tickets_id = t.id
 inner join contact_details cd on cd.id = b.contact_details_id
 inner join user u on u.id = cd.user_id

----------------------------------
----------------------------------
LATER RESEARCH
  
- security research / links (Jugtours, Mosh etc)
- microservices links:
  https://www.udemy.com/course/spring-boot-microservices-with-spring-cloud-beginner-to-guru/
- log revision: https://www.tutorialspoint.com/log4j/log4j_logging_files.htm

----------------------------------
----------------------------------






