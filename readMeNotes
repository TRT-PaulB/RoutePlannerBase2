Based on approach in Java Jugtours:
https://developer.okta.com/blog/2018/07/19/simple-crud-react-and-spring-boot


BASIC SPRING SECURITY MYSQL TUTORIAL:
https://www.youtube.com/watch?v=TNt3GHuayXs

----------------------------------
Wednesday 25th Sept

- DONE redesign basket to purchase flow completely
- DONE refactor model
- DONE put in webservice stubs
- DONE team meetings
- DONE poc in react with proper returns webservice 
- DONE regression that it starts up ok (after db teardown)




- update pd notes in the light of the team project 
- changes to PD doc:
  - replace node.js with spring MVC, security and Thymeleaf project
  - other: other security techniques, microservices, kubenetes,
           update q+a, tech lib and xls, extend post java 8,
           list all mini-projs and DTT lists 

----------------------------------
Thursday 26th Sept

- create and test backends for flow against postman
- test rewriting controllers as JSON handlers
- dummy save of data from runner into system (test transactions)
- poc handling errors as recommended in Controllers and React
- poc dao and service, and controller tests (see Halifax)

+ call utility warehouse
leave 5pm for squash

----------------------------------
Friday 27th Sept

==> TEAM PROJECT
- define very basic idea for gui structure
- highlight front end shells and approach to get started

----------------------------------
Mon 30th Sept, Thurs-Fri 3rd/4th Oct

==> TEAM PROJECT

- security research / links
- microservices links:
  https://www.udemy.com/course/spring-boot-microservices-with-spring-cloud-beginner-to-guru/

-----------------------------------
RP JOBS:

- add in basic front end for basket and making a purchase
  --> basket handling, contact details, purchase, sale confirmation 
  --> apply mosh style error handling in front end
  --> review security options and apply to RP
  --> overview of react and rest unit tests  
- design admin flow and define security policy for system
- develop admin and member areas (keep it simple)

----------------------------------



http://localhost:8080/
http://localhost:8080/home

http://localhost:8080/user
http://localhost:8080/admin*

http://localhost:8080/error


INTERNAL REACT APP:
react-routeplanner-app

- db: new_routeplanner_shopping
 - create table user (id bigint, active boolean, password varchar(50), roles varchar(50), user_name varchar(50) );
 - insert into user values (1, 1, 'pass', 'ROLE_USER', 'user'); 
 - insert into user values (2, 1, 'pass', 'ROLE_ADMIN', 'admin');
 
------------------------------------------------------------

logs:
https://www.tutorialspoint.com/log4j/log4j_logging_files.htm


//  REACT ROUTES: ==> http://localhost:8080/
	//  --> routeplanner/                home
    //  --> routeplanner/login           login attempt 		
	//  --> routeplanner/query           query page after successful login


Apply registration page
Add admin pages + permissions

========================================================================

HttpSession sess = request.getSession();
    	sess.setAttribute("stationList", travelInfoService.getStationList());
    	sess.setAttribute("ticketTypeList", TicketType.values());
    	sess.setAttribute("passengerTypeList", PassengerType.values());
    	sess.setAttribute("cardTypeList", CardType.values());
    	sess.setAttribute("titleList", getTitleLiterals());
    	sess.setAttribute("currUser", user);
      	
    	
    	private String[] getTitleLiterals() {
    	return new String[] {"rp.person.title.mr", 
    			"rp.person.title.mrs", 
    			"rp.person.title.miss"};
    }
    
    	
    	
 Shopping
 --> basket
     --> ticketList
     --> open
     --> user
 --> order
     --> PaymentInfo
     --> ContactDetails
     --> Basket
     --> User
 --> purchase
     --> Order
     --> TransactionDate
     --> User

 ========================================================================
////////////////

//Insert
			//logger.info("Inserting -> {}", userRepository.save(new User("John", "A1234657")));
//	logger.info("Student id 10001 -> {}", stuRepository.findById(10001L));
//	logger.info("All users 1 -> {}", stuRepository.findAll());
	//Update
			//logger.info("Update 10001 -> {}", stuRepository.save(newStudent));